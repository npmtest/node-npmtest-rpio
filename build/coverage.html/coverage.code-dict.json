{"/home/travis/build/npmtest/node-npmtest-rpio/test.js":"/* istanbul instrument in package npmtest_rpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rpio/lib.npmtest_rpio.js":"/* istanbul instrument in package npmtest_rpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rpio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rpio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rpio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rpio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rpio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rpio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rpio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_rpio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rpio.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_rpio.__dirname +\n                    '/lib.npmtest_rpio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rpio/node_modules/rpio/lib/rpio.js":"/*\n * Copyright (c) 2015 Jonathan Perkin <jonathan@perkin.org.uk>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\nvar binding = require('bindings')('rpio');\nvar fs = require('fs');\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\n/*\n * Event Emitter gloop.\n */\nfunction rpio()\n{\n\tEventEmitter.call(this);\n}\nutil.inherits(rpio, EventEmitter);\n\n/*\n * Constants.\n */\nrpio.prototype.LOW = 0x0;\nrpio.prototype.HIGH = 0x1;\n\n/*\n * Supported function select modes.  INPUT and OUTPUT match the bcm2835\n * function select integers.  PWM is handled specially.\n */\nrpio.prototype.INPUT = 0x0;\nrpio.prototype.OUTPUT = 0x1;\nrpio.prototype.PWM = 0x2;\n\n/*\n * Configure builtin pullup/pulldown resistors.\n */\nrpio.prototype.PULL_OFF = 0x0;\nrpio.prototype.PULL_DOWN = 0x1;\nrpio.prototype.PULL_UP = 0x2;\n\n/*\n * Pin edge detect events.  Default to both.\n */\nrpio.prototype.POLL_LOW = 0x1;\t/* Falling edge detect */\nrpio.prototype.POLL_HIGH = 0x2;\t/* Rising edge detect */\nrpio.prototype.POLL_BOTH = 0x3;\t/* POLL_LOW | POLL_HIGH */\n\n/*\n * Reset pin status on close (default), or preserve current status.\n */\nrpio.prototype.PIN_PRESERVE = 0x0;\nrpio.prototype.PIN_RESET = 0x1;\n\n/*\n * Pin event polling.  We track which pins are being monitored, and create a\n * bitmask for efficient checks.  The event_poll function is executed in a\n * setInterval() context whenever any pins are being monitored, and emits\n * events when their EDS bit is set.\n */\nvar event_pins = {};\nvar event_mask = 0x0;\nvar event_running = false;\n\nfunction event_poll()\n{\n\tvar active = binding.gpio_event_poll(event_mask);\n\n\tfor (gpiopin in event_pins) {\n\t\tif (active & (1 << gpiopin))\n\t\t\trpio.prototype.emit('pin' + gpiopin);\n\t}\n}\n\n/*\n * GPIO Pad Control\n */\nrpio.prototype.PAD_GROUP_0_27  = 0x0;\nrpio.prototype.PAD_GROUP_28_45 = 0x1;\nrpio.prototype.PAD_GROUP_46_53 = 0x2;\n\nrpio.prototype.PAD_DRIVE_2mA      = 0x00;\nrpio.prototype.PAD_DRIVE_4mA      = 0x01;\nrpio.prototype.PAD_DRIVE_6mA      = 0x02;\nrpio.prototype.PAD_DRIVE_8mA      = 0x03;\nrpio.prototype.PAD_DRIVE_10mA     = 0x04;\nrpio.prototype.PAD_DRIVE_12mA     = 0x05;\nrpio.prototype.PAD_DRIVE_14mA     = 0x06;\nrpio.prototype.PAD_DRIVE_16mA     = 0x07;\nrpio.prototype.PAD_HYSTERESIS     = 0x08;\nrpio.prototype.PAD_SLEW_UNLIMITED = 0x10;\n\n/*\n * Set up GPIO mapping based on board revision.\n */\nvar gpiomap;\nfunction setup_board()\n{\n\tvar cpuinfo, boardrev, match;\n\n\tcpuinfo = fs.readFileSync('/proc/cpuinfo', 'ascii', function(err) {\n\t\tif (err)\n\t\t\tthrow err;\n\t});\n\n\tcpuinfo.toString().split(/\\n/).forEach(function (line) {\n\t\tmatch = line.match(/^Revision.*(.{4})/);\n\t\tif (match) {\n\t\t\tboardrev = parseInt(match[1], 16);\n\t\t\treturn;\n\t\t}\n\t});\n\n\tswitch (boardrev) {\n\tcase 0x2:\n\tcase 0x3:\n\t\tgpiomap = \"v1rev1\";\n\t\tbreak;\n\tcase 0x4:\n\tcase 0x5:\n\tcase 0x6:\n\tcase 0x7:\n\tcase 0x8:\n\tcase 0x9:\n\tcase 0xd:\n\tcase 0xe:\n\tcase 0xf:\n\t\tgpiomap = \"v1rev2\";\n\t\tbreak;\n\tcase 0x10:\n\tcase 0x12:\n\tcase 0x13:\n\tcase 0x15:\n\tcase 0x92:\n\tcase 0x93:\n\tcase 0xc1:\n\tcase 0x1041:\n\tcase 0x2042:\n\tcase 0x2082:\n\t\tgpiomap = \"v2plus\";\n\t\tbreak;\n\tdefault:\n\t\tthrow \"Unable to determine board revision\";\n\t\tbreak;\n\t}\n}\nsetup_board();\n\n\n/*\n * Default pin mode is 'physical'.  Other option is 'gpio'\n */\nvar rpio_inited = false;\nvar rpio_options = {\n\tgpiomem: true,\n\tmapping: 'physical',\n};\n\n/*\n * Valid GPIO pins, using GPIOxx BCM numbering.\n */\nvar validgpio = {\n\t'v1rev1': [\n\t\t0, 1, 4, 7, 8, 9, 10, 11, 14, 15, 17, 18, 21, 22, 23, 24, 25\n\t],\n\t'v1rev2': [\n\t\t2, 3, 4, 7, 8, 9, 10, 11, 14, 15, 17, 18, 22, 23, 24, 25, 27,\n\t\t28, 29, 30, 31\n\t],\n\t'v2plus': [\n\t\t2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n\t\t19, 20, 21, 22, 23, 24, 25, 26, 27\n\t]\n}\n/*\n * Map physical pin to BCM GPIOxx numbering.\n */\nvar pincache = {};\nvar pinmap = {\n\t'v1rev1': {\n\t\t3: 0,\n\t\t5: 1,\n\t\t7: 4,\n\t\t8: 14,\n\t\t10: 15,\n\t\t11: 17,\n\t\t12: 18,\n\t\t13: 21,\n\t\t15: 22,\n\t\t16: 23,\n\t\t18: 24,\n\t\t19: 10,\n\t\t21: 9,\n\t\t22: 25,\n\t\t23: 11,\n\t\t24: 8,\n\t\t26: 7\n\t},\n\t'v1rev2': {\n\t\t3: 2,\n\t\t5: 3,\n\t\t7: 4,\n\t\t8: 14,\n\t\t10: 15,\n\t\t11: 17,\n\t\t12: 18,\n\t\t13: 27,\n\t\t15: 22,\n\t\t16: 23,\n\t\t18: 24,\n\t\t19: 10,\n\t\t21: 9,\n\t\t22: 25,\n\t\t23: 11,\n\t\t24: 8,\n\t\t26: 7\n\t\t/* XXX: no support for the P5 header pins. */\n\t},\n\t'v2plus': {\n\t\t3: 2,\n\t\t5: 3,\n\t\t7: 4,\n\t\t8: 14,\n\t\t10: 15,\n\t\t11: 17,\n\t\t12: 18,\n\t\t13: 27,\n\t\t15: 22,\n\t\t16: 23,\n\t\t18: 24,\n\t\t19: 10,\n\t\t21: 9,\n\t\t22: 25,\n\t\t23: 11,\n\t\t24: 8,\n\t\t26: 7,\n\t\t29: 5,\n\t\t31: 6,\n\t\t32: 12,\n\t\t33: 13,\n\t\t35: 19,\n\t\t36: 16,\n\t\t37: 26,\n\t\t38: 20,\n\t\t40: 21\n\t},\n}\n\nfunction pin_to_gpio(pin)\n{\n\tif (pincache[pin])\n\t\treturn pincache[pin];\n\n\tswitch (rpio_options.mapping) {\n\tcase 'physical':\n\t\tif (!(pin in pinmap[gpiomap]))\n\t\t\tthrow \"Invalid pin\";\n\t\tpincache[pin] = pinmap[gpiomap][pin];\n\t\tbreak;\n\tcase 'gpio':\n\t\tif (validgpio[gpiomap].indexOf(pin) === -1)\n\t\t\tthrow \"Invalid pin\";\n\t\tpincache[pin] = pin;\n\t\tbreak;\n\tdefault:\n\t\tthrow \"Unsupported GPIO mode\";\n\t}\n\n\treturn pincache[pin];\n}\n\nfunction check_sys_gpio(pin)\n{\n\tif (fs.existsSync('/sys/class/gpio/gpio' + pin))\n\t\tthrow \"GPIO\" + pin + \" is currently in use by /sys/class/gpio\";\n}\n\nfunction get_pwm_function(pin)\n{\n\tvar gpiopin = pin_to_gpio(pin);\n\n\tswitch (gpiopin) {\n\tcase 12:\n\tcase 13:\n\t\treturn 4; /* BCM2835_GPIO_FSEL_ALT0 */\n\tcase 18:\n\tcase 19:\n\t\treturn 2; /* BCM2835_GPIO_FSEL_ALT5 */\n\tdefault:\n\t\tthrow \"Pin \" + pin + \" does not support hardware PWM\";\n\t}\n}\n\nfunction get_pwm_channel(pin)\n{\n\tvar gpiopin = pin_to_gpio(pin);\n\n\tswitch (gpiopin) {\n\tcase 12:\n\tcase 18:\n\t\treturn 0;\n\tcase 13:\n\tcase 19:\n\t\treturn 1;\n\tdefault:\n\t\tthrow \"Unknown PWM channel for pin \" + pin;\n\t}\n}\n\nfunction set_pin_pwm(pin)\n{\n\tvar gpiopin = pin_to_gpio(pin);\n\tvar channel, func;\n\n\tif (rpio_options.gpiomem)\n\t\tthrow \"PWM not available in gpiomem mode\";\n\n\tcheck_sys_gpio(gpiopin);\n\n\t/*\n\t * PWM channels and alternate functions differ from pin to pin, set\n\t * them up appropriately based on selected pin.\n\t */\n\tchannel = get_pwm_channel(pin);\n\tfunc = get_pwm_function(pin);\n\n\tbinding.gpio_function(gpiopin, func);\n\n\t/*\n\t * For now we assume mark-space mode, balanced is unsupported.\n\t */\n\tbinding.pwm_set_mode(channel, 1, 1);\n}\n\n/*\n * GPIO\n */\nrpio.prototype.init = function(opts)\n{\n\topts = opts || {};\n\n\tfor (var k in rpio_options) {\n\t\tif (k in opts)\n\t\t\trpio_options[k] = opts[k];\n\t}\n\n\t/* Invalidate the pin cache as we may have changed mapping. */\n\tpincache = {};\n\n\t/*\n\t * Open the bcm2835 driver.\n\t */\n\tbinding.rpio_init(Number(rpio_options.gpiomem));\n\trpio_inited = true;\n}\n\nrpio.prototype.open = function(pin, mode, init)\n{\n\tvar gpiopin = pin_to_gpio(pin);\n\n\tif (!rpio_inited) {\n\t\t/* PWM requires full /dev/mem */\n\t\tif (mode === rpio.prototype.PWM)\n\t\t\trpio_options.gpiomem = false;\n\t\trpio.prototype.init();\n\t}\n\n\tcheck_sys_gpio(gpiopin);\n\n\tswitch (mode) {\n\tcase rpio.prototype.INPUT:\n\t\tif (init !== undefined)\n\t\t\tbinding.gpio_pud(gpiopin, init);\n\t\treturn binding.gpio_function(gpiopin, rpio.prototype.INPUT);\n\tcase rpio.prototype.OUTPUT:\n\t\tif (init !== undefined)\n\t\t\tbinding.gpio_write(gpiopin, init);\n\t\treturn binding.gpio_function(gpiopin, rpio.prototype.OUTPUT);\n\tcase rpio.prototype.PWM:\n\t\treturn set_pin_pwm(pin);\n\tdefault:\n\t\tthrow \"Unsupported mode \" + mode;\n\t}\n}\n\nrpio.prototype.mode = function(pin, mode)\n{\n\tvar gpiopin = pin_to_gpio(pin);\n\n\tswitch (mode) {\n\tcase rpio.prototype.INPUT:\n\t\treturn binding.gpio_function(gpiopin, rpio.prototype.INPUT);\n\tcase rpio.prototype.OUTPUT:\n\t\treturn binding.gpio_function(gpiopin, rpio.prototype.OUTPUT);\n\tcase rpio.prototype.PWM:\n\t\treturn set_pin_pwm(pin);\n\tdefault:\n\t\tthrow \"Unsupported mode \" + mode;\n\t}\n}\n\nrpio.prototype.read = function(pin)\n{\n\treturn binding.gpio_read(pin_to_gpio(pin));\n}\n\nrpio.prototype.readbuf = function(pin, buf, len)\n{\n\tif (len === undefined)\n\t\tlen = buf.length;\n\n\tif (len > buf.length)\n\t\tthrow \"Buffer not large enough to accommodate request\";\n\n\treturn binding.gpio_readbuf(pin_to_gpio(pin), buf, len);\n}\n\nrpio.prototype.write = function(pin, value)\n{\n\treturn binding.gpio_write(pin_to_gpio(pin), value);\n}\n\nrpio.prototype.writebuf = function(pin, buf, len)\n{\n\tif (len === undefined)\n\t\tlen = buf.length;\n\n\tif (len > buf.length)\n\t\tthrow \"Buffer not large enough to accommodate request\";\n\n\treturn binding.gpio_writebuf(pin_to_gpio(pin), buf, len);\n}\n\nrpio.prototype.readpad = function(group)\n{\n\tif (rpio_options.gpiomem)\n\t\tthrow \"Pad control not available in gpiomem mode\";\n\n\treturn binding.gpio_pad_read(group);\n}\n\nrpio.prototype.writepad = function(group, control)\n{\n\tif (rpio_options.gpiomem)\n\t\tthrow \"Pad control not available in gpiomem mode\";\n\n\tbinding.gpio_pad_write(group, control);\n}\n\nrpio.prototype.pud = function(pin, state)\n{\n\tbinding.gpio_pud(pin_to_gpio(pin), state);\n}\n\nrpio.prototype.poll = function(pin, cb, direction)\n{\n\tvar gpiopin = pin_to_gpio(pin);\n\n\tif (direction === undefined)\n\t\tdirection = rpio.prototype.POLL_BOTH;\n\n\t/*\n\t * If callback is a function, set up pin for polling, otherwise\n\t * clear it.\n\t */\n\tif (typeof(cb) === 'function') {\n\t\tif (gpiopin in event_pins)\n\t\t\tthrow \"Pin \" + pin + \" is already listening for events.\"\n\n\t\tbinding.gpio_event_set(gpiopin, direction);\n\n\t\tvar pincb = function() {\n\t\t\tcb(pin);\n\t\t};\n\t\trpio.prototype.addListener('pin' + gpiopin, pincb);\n\n\t\tevent_pins[gpiopin] = pincb;\n\t\tevent_mask |= (1 << gpiopin);\n\n\t\tif (!(event_running))\n\t\t\tevent_running = setInterval(event_poll, 1);\n\t} else {\n\t\tif (!(gpiopin in event_pins))\n\t\t\tthrow \"Pin \" + pin + \" is not listening for events.\"\n\n\t\tbinding.gpio_event_clear(gpiopin);\n\n\t\trpio.prototype.removeListener('pin' + gpiopin, event_pins[gpiopin]);\n\n\t\tdelete event_pins[gpiopin];\n\t\tevent_mask &= ~(1 << gpiopin);\n\n\t\tif (Object.keys(event_pins).length === 0) {\n\t\t\tclearInterval(event_running);\n\t\t\tevent_running = false;\n\t\t}\n\t}\n}\n\nrpio.prototype.close = function(pin, reset)\n{\n\tvar gpiopin = pin_to_gpio(pin);\n\n\tif (reset === undefined)\n\t\treset = rpio.prototype.PIN_RESET;\n\n\tif (gpiopin in event_pins)\n\t\trpio.prototype.poll(pin, null);\n\n\tif (reset) {\n\t\tif (!rpio_options.gpiomem)\n\t\t\trpio.prototype.pud(pin, rpio.prototype.PULL_OFF);\n\t\trpio.prototype.mode(pin, rpio.prototype.INPUT);\n\t}\n}\n\n/*\n * PWM\n */\nrpio.prototype.pwmSetClockDivider = function (divider)\n{\n\tif (divider !== 0 && (divider & (divider - 1)) !== 0)\n\t\tthrow \"Clock divider must be zero or power of two\";\n\n\treturn binding.pwm_set_clock(divider);\n}\n\nrpio.prototype.pwmSetRange = function (pin, range)\n{\n\tvar channel = get_pwm_channel(pin);\n\n\treturn binding.pwm_set_range(channel, range);\n}\n\nrpio.prototype.pwmSetData = function (pin, data)\n{\n\tvar channel = get_pwm_channel(pin);\n\n\treturn binding.pwm_set_data(channel, data);\n}\n\n/*\n * i²c\n */\nrpio.prototype.i2cBegin = function()\n{\n\tif (!rpio_inited) {\n\t\t/* i²c requires full /dev/mem */\n\t\trpio_options.gpiomem = false;\n\t\trpio.prototype.init();\n\t}\n\n\tif (rpio_options.gpiomem)\n\t\tthrow \"i²c not available in gpiomem mode\";\n\n\tbinding.i2c_begin();\n}\n\nrpio.prototype.i2cSetSlaveAddress = function(addr)\n{\n\treturn binding.i2c_set_slave_address(addr);\n}\n\nrpio.prototype.i2cSetClockDivider = function(divider)\n{\n\tif ((divider % 2) !== 0)\n\t\tthrow \"Clock divider must be an even number\";\n\n\treturn binding.i2c_set_clock_divider(divider);\n}\n\nrpio.prototype.i2cSetBaudRate = function(baud)\n{\n\treturn binding.i2c_set_baudrate(baud);\n}\n\nrpio.prototype.i2cRead = function(buf, len)\n{\n\tif (len === undefined)\n\t\tlen = buf.length;\n\n\tif (len > buf.length)\n\t\tthrow \"Buffer not large enough to accommodate request\";\n\n\treturn binding.i2c_read(buf, len);\n}\n\nrpio.prototype.i2cWrite = function(buf, len)\n{\n\tif (len === undefined)\n\t\tlen = buf.length;\n\n\tif (len > buf.length)\n\t\tthrow \"Buffer not large enough to accommodate request\";\n\n\treturn binding.i2c_write(buf, len);\n}\n\nrpio.prototype.i2cEnd = function()\n{\n\tbinding.i2c_end();\n}\n\n/*\n * SPI\n */\nrpio.prototype.spiBegin = function()\n{\n\tif (!rpio_inited) {\n\t\t/* SPI requires full /dev/mem */\n\t\trpio_options.gpiomem = false;\n\t\trpio.prototype.init();\n\t}\n\n\tif (rpio_options.gpiomem)\n\t\tthrow \"SPI not available in gpiomem mode\";\n\n\tbinding.spi_begin();\n}\n\nrpio.prototype.spiChipSelect = function(cs)\n{\n\treturn binding.spi_chip_select(cs);\n}\n\nrpio.prototype.spiSetCSPolarity = function(cs, active)\n{\n\treturn binding.spi_set_cs_polarity(cs, active);\n}\n\nrpio.prototype.spiSetClockDivider = function(divider)\n{\n\tif ((divider % 2) !== 0 || divider < 0 || divider > 65536)\n\t\tthrow \"Clock divider must be an even number between 0 and 65536\";\n\n\treturn binding.spi_set_clock_divider(divider);\n}\n\nrpio.prototype.spiSetDataMode = function(mode)\n{\n\treturn binding.spi_set_data_mode(mode);\n}\n\nrpio.prototype.spiTransfer = function(txbuf, rxbuf, len)\n{\n\treturn binding.spi_transfer(txbuf, rxbuf, len);\n}\n\nrpio.prototype.spiWrite = function(buf, len)\n{\n\treturn binding.spi_write(buf, len);\n}\n\nrpio.prototype.spiEnd = function()\n{\n\tbinding.spi_end();\n}\n\n/*\n * Misc functions.\n */\nrpio.prototype.sleep = function(secs)\n{\n\tbinding.rpio_usleep(secs * 1000000);\n}\n\nrpio.prototype.msleep = function(msecs)\n{\n\tbinding.rpio_usleep(msecs * 1000);\n}\n\nrpio.prototype.usleep = function(usecs)\n{\n\tbinding.rpio_usleep(usecs);\n}\n\nprocess.on('exit', function (code) {\n\tbinding.rpio_close();\n});\n\nmodule.exports = new rpio;\n"}